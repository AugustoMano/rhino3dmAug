diff --git a/rhino3dm.d.ts b/rhino3dm_mod.d.ts
index b3afd2c..37879b0 100644
--- a/rhino3dm.d.ts
+++ b/rhino3dm_mod.d.ts
@@ -54,6 +54,18 @@ declare module 'rhino3dm' {
 		Screen
 	}
 
+	enum CurveEvaluationSide{
+		Default,
+		Below,
+		Above
+	}
+
+	enum CurveOrientation{
+		Undefined,
+		Clockwise,
+		CounterClockwise
+	}
+
 	enum CurvePipingCapTypes {
 		None,
 		Flat,
@@ -345,6 +357,7 @@ declare module 'rhino3dm' {
 		BasepointZero: typeof BasepointZero
 		ComponentIndexType: typeof ComponentIndexType
 		CoordinateSystem: typeof CoordinateSystem
+		CurveOrientation: typeof CurveOrientation
 		CurvePipingCapTypes: typeof CurvePipingCapTypes
 		DecalMappings: typeof DecalMappings
 		DecalProjections: typeof DecalProjections
@@ -398,6 +411,7 @@ declare module 'rhino3dm' {
 		Cone: typeof Cone;
 		ConstructionPlane: typeof ConstructionPlane;
 		Curve: typeof Curve;
+		CurveEvaluationSide: typeof CurveEvaluationSide
 		CurvePiping: typeof CurvePiping;
 		CurveProxy: typeof CurveProxy;
 		Cylinder: typeof Cylinder;
@@ -580,7 +594,7 @@ declare module 'rhino3dm' {
 		/**
 		 * Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
 		 */
-		angle: number;
+		angleRadians: number;
 		/**
 		 * Gets or sets the start angle (in Degrees) for this arc segment.
 		 */
@@ -597,8 +611,14 @@ declare module 'rhino3dm' {
 		constructor(circle: Circle, angleRadians: number);
 
 		constructor(center: number[], radius: number, angleRadians: number);
-		/** ... */
-		static createFromPoints(): void;
+		/**
+		 * @description Initializes a new arc through three points. If the points are coincident or co-linear, this will result in an Invalid arc.
+		 * @param {number[]} startPoint Start point of arc.
+		 * @param {number[]} pointOnInterior Point on arc interior.
+		 * @param {number[]} endPoint End point of arc.
+		 * @returns {Arc}
+		*/
+		static createFromPoints(startPoint: number[], pointOnInterior: number[], endPoint: number[]): Arc;
 		/**
 		 * @description Sets arc's angle domain (in Radians) as a sub-domain of the circle.
 		 * @param {number[]} domain 0 < domain[1] - domain[0] <= 2.0 * RhinoMath.Pi.
@@ -678,16 +698,40 @@ declare module 'rhino3dm' {
 		 * Gets the angles of this arc in degrees.
 		 */
 		angleDegrees: number;
-		/** ... */
-		static createFromArc(): void;
-		/** ... */
-		static createFromArcParams(): void;
-		/** ... */
-		static createFromCircle(): void;
-		/** ... */
-		static createFromCircleParams(): void;
-		/** ... */
-		arc(): void;
+		/**
+		 * @description Initializes a new instance, copying values from another Arc.
+		 * @param {Arc} arc An original arc.
+		 * @returns {ArcCurve}
+		*/
+		static createFromArc(arc: Arc): ArcCurve;
+		/**
+		 * @description Initializes a new instance, copying values from another Arc and specifying the needed parametrization of the arc.
+		 * @param {Arc} arc An original arc.
+		 * @param {number} t0 A new Domain.T0 value.
+		 * @param {number} t1 A new Domain.T1 value.
+		 * @returns {ArcCurve}
+		*/
+		static createFromArcParams(arc: Arc, t0: number, t1: number): ArcCurve;
+		/**
+		 * @description Initializes a new instance, copying copying the shape of a Circle.
+		 * Parameterization will be [0;circle.Circumference]
+		 * @param {Circle} circle The original circle.
+		 * @returns {ArcCurve}
+		*/
+		static createFromCircle(circle: Circle): ArcCurve;
+		/**
+		 * @description Initializes a new instance, copying copying the shape of a Circle and specifying the needed parametrization of the arc.
+		 * Circle will not be newly cut at these parameterizations.
+		 * @param {Circle} circle The original circle.
+		 * @param {number} t0 A new Domain.T0 value.
+		 * @param {number} t1 A new Domain.T1 value.
+		 * @returns {ArcCurve}
+		*/
+		static createFromCircleParams(circle: Circle, t0: number, t1: number): ArcCurve;
+		/**
+		 * Gets the arc that is contained within this ArcCurve.
+		*/
+		arc(): Arc;
 	}
 
 	class ArchivableDictionary {
@@ -771,19 +815,19 @@ declare module 'rhino3dm' {
 	class Bitmap {
 		/**
 		 */
-		width: any;
+		width: number;
 		/**
 		 */
-		height: any;
+		height: number;
 		/**
 		 */
-		bitsPerPixel: any;
+		bitsPerPixel: number;
 		/**
 		 */
-		sizeOfScan: any;
+		sizeOfScan: number;
 		/**
 		 */
-		sizeOfImage: any;
+		sizeOfImage: number;
 	}
 
 	class BoundingBox {
@@ -817,9 +861,21 @@ declare module 'rhino3dm' {
 		 * The diagonal connects the Min and Max points.
 		 */
 		diagonal: number[];
-
+		/**
+		 * @description Constructs a new bounding box from two corner points.
+		 * @param {number[]} min Point containing all the minimum coordinates.
+		 * @param {number[]} max Point containing all the maximum coordinates.
+		*/
 		constructor(min: number[], max: number[]);
-
+		/**
+		 * @description Constructs a bounding box from numeric extremes.
+		 * @param {number} minX Lower extreme for box X size.
+		 * @param {number} minY Lower extreme for box Y size.
+		 * @param {number} minZ Lower extreme for box Z size.
+		 * @param {number} maxX Upper extreme for box X size.
+		 * @param {number} maxY Upper extreme for box Y size.
+		 * @param {number} maxZ Upper extreme for box Z size.
+		*/
 		constructor(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number);
 		/**
 		 * @description Finds the closest point on or in the bounding box.
@@ -835,8 +891,15 @@ declare module 'rhino3dm' {
 		 * @returns {void}
 		 */
 		inflate(amount:number): void;
-		/** ... */
-		inflateXYZ(): void;
+		/**
+		 * @description Inflate the box with custom amounts in all directions. Inflating with negative amounts may result in decreasing boxes.
+		 * InValid boxes can not be inflated.
+		 * @param {number} xAmount Amount (in model units) to inflate this box in the x direction.
+		 * @param {number} yAmount Amount (in model units) to inflate this box in the y direction.
+		 * @param {number} zAmount Amount (in model units) to inflate this box in the z direction.
+		 * @returns {void}
+		*/
+		inflateXYZ(xAmount: number, yAmount: number, zAmount: number): void;
 		/**
 		 * @description Tests a point for bounding box inclusion. This is the same as calling Contains(point, false)
 		 * @param {number[]} point Point to test.
@@ -863,7 +926,7 @@ declare module 'rhino3dm' {
 		 */
 		transform(xform:Transform): boolean;
 		/**
-		 * @description Constructs a  representation of this bounding box.
+		 * @description Constructs a Brep representation of this bounding box.
 		 * @returns {Brep} If this operation is successful, a Brep representation of this box; otherwise null.
 		 */
 		toBrep(): Brep;
@@ -874,11 +937,11 @@ declare module 'rhino3dm' {
 		 */
 		static union(other:BoundingBox): void;
 		/** ... */
-		encode(): void;
+		encode(): object;
 		/** ... */
-		toJSON(): void;
+		toJSON(): object;
 		/** ... */
-		static decode(): void;
+		static decode(): BoundingBox;
 	}
 
 	class Box {
@@ -957,14 +1020,18 @@ declare module 'rhino3dm' {
 		 * @returns {Brep}
 		 */
 		static createFromMesh(trimmedTriangles:boolean): Brep;
-		/** ... */
-		static createFromBoundingBox(): void;
 		/**
-		 * @description Constructs new brep that matches a bounding box.
-		 * @param {BoundingBox} box A box to use for creation.
+		 * Constructs new brep that matches a bounding box.
+		 * @param {BoundingBox} bbox A bounding box to use for creation.
 		 * @returns {Brep} A new brep; or null on failure.
 		 */
-		static CreateFromBox(box:BoundingBox): Brep;
+		static createFromBoundingBox(bbox:BoundingBox): Brep;
+		/**
+		 * Constructs new brep that matches an aligned box.
+		 * @param {Box} box Box to match.
+		 * @returns {Brep} A Brep with 6 faces that is similar to the Box.
+		 */
+		static CreateFromBox(box:Box): Brep;
 		/**
 		 * @description Constructs a Brep definition of a cylinder.
 		 * @param {Cylinder} cylinder cylinder.IsFinite() must be true.
@@ -1026,14 +1093,26 @@ declare module 'rhino3dm' {
 		 * @returns {Brep} Resulting brep or null on failure.
 		 */
 		static createTrimmedPlane(plane:Plane,curve:Curve): Brep;
-		/** ... */
-		faces(): void;
-		/** ... */
-		surfaces(): void;
-		/** ... */
-		edges(): void;
-		/** ... */
-		vertices(): void;
+		/**
+		 * @description Gets the brep faces list accessor.
+		 * @returns {BrepFaceList}
+		*/
+		faces(): BrepFaceList;
+		/**
+		 * @description Parametric surfaces used by faces
+		 * @returns {BrepSurfaceList}
+		*/
+		surfaces(): BrepSurfaceList;
+		/**
+		 * @description Gets the brep edges list accessor.
+		 * @returns {BrepEdgeList}
+		*/
+		edges(): BrepEdgeList;
+		/**
+		 * @description Gets the brep vertices list accessor.
+		 * @returns {BrepVertexList}
+		*/
+		vertices(): BrepVertexList;
 		/**
 		 * @description Reverses entire brep orientation of all faces.
 		 * @returns {void}
@@ -1049,8 +1128,11 @@ declare module 'rhino3dm' {
 		 * Gets the number of brep edges.
 		 */
 		count: number;
-		/** ... */
-		get(): void;
+		/**
+		 * @description Retrieve an edge from the BrepEdgeList
+		 * @param {number} index integer index of BrepEdge to retrieve from the list
+		*/
+		get(index:number): BrepEdge;
 	}
 
 	class BrepFace extends SurfaceProxy {
@@ -1097,8 +1179,11 @@ declare module 'rhino3dm' {
 		 * Gets the number of brep faces.
 		 */
 		count: number;
-		/** ... */
-		get(): void;
+		/**
+		 * @description Retrieve a face from the BrepFaceList
+		 * @param {number} index integer index of BrepFace to retrieve from the list
+		*/
+		get(index:number): BrepFace;
 	}
 
 	class BrepSurfaceList {
@@ -1106,8 +1191,11 @@ declare module 'rhino3dm' {
 		 * Gets the number of surfaces in a brep.
 		 */
 		count: number;
-		/** ... */
-		get(): void;
+		/**
+		 * @description Retrieve a Surface from the BrepSurfaceList
+		 * @param {number} index integer index of Surface to retrieve from the list
+		*/
+		get(index:number): Surface;
 	}
 
 	class BrepVertex extends Point {
@@ -1116,11 +1204,15 @@ declare module 'rhino3dm' {
 		 */
 		vertexIndex: number;
 		/**
+		 * @description Gets the number of edges associated with this vertex.
+		 * @returns {number}
 		 */
-		edgeCount: any;
+		edgeCount: number;
 		/**
+		 * @description Gets the indices of all edges associated with this vertex.
+		 * @returns {number[]} Empty array on failure.<
 		 */
-		edgeIndices: any;
+		edgeIndices: number[];
 	}
 
 	class BrepVertexList {
@@ -1128,8 +1220,11 @@ declare module 'rhino3dm' {
 		 * Gets the number of brep vertices.
 		 */
 		count: number;
-		/** ... */
-		get(): void;
+		/**
+		 * @description Retrieve a BrepVertex from the BrepVertexList
+		 * @param {number} index integer index of BrepVertex to retrieve from the list
+		*/
+		get(index:number): BrepVertex;
 	}
 
 	class Circle {
@@ -1167,9 +1262,16 @@ declare module 'rhino3dm' {
 		 * Gets or sets the circumference of this circle.
 		 */
 		circumference: number;
-
+		/**
+		 * @description Initializes a circle with center (0,0,0) in the world XY plane.
+		 * @param {number} radius 
+		 */
 		constructor(radius: number);
-
+		/**
+		 * @description Initializes a circle parallel to the world XY plane with given center and radius.
+		 * @param {number[]} center Center of circle.
+		 * @param {number} radius Radius of circle (should be a positive value).
+		 */
 		constructor(center: number[], radius: number);
 		/**
 		 * @description Evaluates whether or not this circle is co-planar with a given plane.
@@ -1246,8 +1348,9 @@ declare module 'rhino3dm' {
 		 */
 		isValid: boolean;
 		/**
+		 * Gets the amount of user strings.
 		 */
-		userStringCount: any;
+		userStringCount: number;
 		/** ... */
 		encode(): void;
 		/**
@@ -1257,14 +1360,26 @@ declare module 'rhino3dm' {
 		toJSON(): string;
 		/** ... */
 		static decode(): void;
+		/**
+		 * @description Attach a user string (key,value combination) to this geometry.
+		 * @param {string} key id used to retrieve this string.
+		 * @param {string} value string associated with key.
+		 * @returns {boolean} true if successful, false if not.
+		*/
+		setUserString(key: string, value:string): boolean;
+		/**
+		 * @description Gets user string from this geometry.
+		 * @param {string} key id used to retrieve the string.
+		 * @returns {string} string associated with the key if successful. null if no key was found.
+		 */
+		getUserString(key: string): string;
+		/**
+		 * @description Gets a copy of all (user key string, user value string) pairs attached to this geometry.
+		 * @returns {string[]}
+		*/
+		getUserStrings(): string[];
 		/** ... */
-		setUserString(): void;
-		/** ... */
-		getUserString(): void;
-		/** ... */
-		getUserStrings(): void;
-		/** ... */
-		rdkXml(): void;
+		rdkXml(): string;
 	}
 
 	class ComponentIndex {
@@ -1341,10 +1456,10 @@ declare module 'rhino3dm' {
 		axis: number[];
 		/**
 		 */
-		angleInRadians: any;
+		angleInRadians: number;
 		/**
 		 */
-		angleInDegrees: any;
+		angleInDegrees: number;
 		/**
 		 * @description Constructs a Nurbs surface representation of this Cone.
 		This is synonymous with calling NurbsSurface.CreateFromCone().
@@ -1526,8 +1641,12 @@ declare module 'rhino3dm' {
 		 * @returns {CurveOrientation} The orientation of this curve with respect to world XY plane.
 		 */
 		closedCurveOrientation(): CurveOrientation;
-		/** ... */
-		closedCurveOrientationPlane(): void;
+		/**
+		 * @description Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane. Only works with simple (no self intersections) closed, planar curves.
+		 * @param {Plane} plane The plane in which to solve the orientation.
+		 * @returns {CurveOrientation} The orientation of this curve with respect to world XY plane.
+		*/
+		closedCurveOrientationPlane(plane:Plane): CurveOrientation;
 		/**
 		 * @description Evaluates point at a curve parameter.
 		 * @param {number} t Evaluation parameter.
@@ -1572,11 +1691,17 @@ declare module 'rhino3dm' {
 		 * @description Evaluate the derivatives at the specified curve parameter.
 		 * @param {number} t Curve parameter to evaluate.
 		 * @param {number} derivativeCount Number of derivatives to evaluate, must be at least 0.
-		 * @returns {any[]} An array of vectors that represents all the derivatives starting at zero.
+		 * @returns {number[][]} An array of vectors that represents all the derivatives starting at zero.
 		 */
-		derivativeAt(t:number,derivativeCount:number): any[];
-		/** ... */
-		derivativeAtSide(): void;
+		derivativeAt(t:number,derivativeCount:number): number[][];
+		/**
+		 * @description Evaluate the derivatives at the specified curve parameter.
+		 * @param {number} t Curve parameter to evaluate.
+		 * @param {number} derivativeCount Number of derivatives to evaluate, must be at least 0.
+		 * @param {CurveEvaluationSide} side Side of parameter to evaluate. If the parameter is at a kink, it makes a big difference whether the evaluation is from below or above.</param>
+		 * @returns {number[][]} An array of vectors that represents all the derivatives starting at zero.
+		 */
+		derivativeAtSide(t:number,derivativeCount:number, side: CurveEvaluationSide): void;
 		/**
 		 * @description Convert a NURBS curve parameter to a curve parameter.
 		 * @param {number} nurbsParameter NURBS form parameter.
@@ -1612,29 +1737,45 @@ declare module 'rhino3dm' {
 		 * @returns {NurbsCurve} NURBS representation of the curve on success, null on failure.
 		 */
 		toNurbsCurve(): NurbsCurve;
-		/** ... */
-		toNurbsCurveSubDomain(): void;
+		/**
+		 * @description Constructs a NURBS curve representation of this curve.
+		 * @param {number[]} subdomain The NURBS representation for this portion of the curve is returned.
+		 * @returns {NurbsCurve} NURBS representation of the curve on success, null on failure.
+		 */
+		toNurbsCurveSubDomain(subdomain: number[]): NurbsCurve;
 	}
 
 	class CurvePiping {
 		/**
+		 * @description Specifies whether curve piping is enabled or not.
+		 * @returns {boolean} 
 		 */
-		on: any;
+		on: boolean;
 		/**
+		 * @description Specifies the radius of the pipe (minimum value 0.0001).
+		 * @returns {number} 
 		 */
-		radius: any;
+		radius: number;
 		/**
+		 * @description Specifies the number of segments in the pipe (minimum value 2).
+		 * @returns {number}
 		 */
-		segments: any;
+		segments: number;
 		/**
+		 * @description Specifies whether the pipe is faceted or not.
+		 * @returns {boolean}
 		 */
-		faceted: any;
+		faceted: boolean;
 		/**
+		 * @description Specifies the accuracy of the pipe in the range 0 to 100.
+		 * @returns {number}
 		 */
-		accuracy: any;
+		accuracy: number;
 		/**
+		 * @description Specifies the cap type to use.
+		 * @returns {CurvePipingCapTypes}
 		 */
-		capType: any;
+		capType: CurvePipingCapTypes;
 	}
 
 	class CurveProxy extends Curve {
@@ -1716,11 +1857,13 @@ declare module 'rhino3dm' {
 		 */
 		textureInstanceId: string;
 		/**
+		 * Gets the mapping of the decal.
 		 */
-		mapping: any;
+		mapping: Mappings;
 		/**
+		 * Gets the decal's projection. Used only when mapping is planar.
 		 */
-		projection: any;
+		projection: Projections;
 		/**
 		 * Used only when mapping is cylindrical or spherical.
 		 */
@@ -1732,15 +1875,15 @@ declare module 'rhino3dm' {
 		/**
 		 * Gets the origin of the decal in world space.
 		 */
-		origin: Rhino.Point3d;
+		origin: number[];
 		/**
 		 * For cylindrical and spherical mapping, the vector is unitized.
 		 */
-		vectorUp: Rhino.Vector3d;
+		vectorUp: number[];
 		/**
 		 * Gets the vector across. For cylindrical and spherical mapping, the vector is unitized.
 		 */
-		vectorAcross: Rhino.Vector3d;
+		vectorAcross: number[];
 		/**
 		 * Gets the height of the decal. Only used when mapping is cylindrical.
 		 */
@@ -1750,35 +1893,43 @@ declare module 'rhino3dm' {
 		 */
 		radius: number;
 		/**
+		 * Gets the angles of the decal's arc of 'horizontal sweep'.
 		 */
-		horzSweepStart: any;
+		horzSweepStart: number;
 		/**
+		 * Gets the angles of the decal's arc of 'horizontal sweep'.
 		 */
-		horzSweepEnd: any;
+		horzSweepEnd: number;
 		/**
+		 * Gets the angles of the decal's arc of 'vertical sweep'.
 		 */
-		vertSweepStart: any;
+		vertSweepStart: number;
 		/**
+		 * Gets the angles of the decal's arc of 'vertical sweep'.
 		 */
-		vertSweepEnd: any;
+		vertSweepEnd: number;
 		/**
+		 * The U min bounds of the decal.
 		 */
-		boundsMinU: any;
+		boundsMinU: number;
 		/**
+		 * The V min bounds of the decal.
 		 */
-		boundsMinV: any;
+		boundsMinV: number;
 		/**
+		 * The U max bounds of the decal.
 		 */
-		boundsMaxU: any;
+		boundsMaxU: number;
 		/**
+		 * The V bounds of the decal.
 		 */
-		boundsMaxV: any;
+		boundsMaxV: number;
 	}
 
 	class DimensionStyle extends CommonObject {
 		/**
 		 */
-		name: any;
+		name: string;
 		/**
 		 */
 		arrowBlockId1: string;
@@ -1871,14 +2022,14 @@ declare module 'rhino3dm' {
 		 */
 		parentId: string;
 		/** ... */
-		getFont(): void;
+		getFont(): Font;
 		/** ... */
-		setFont(): void;
+		setFont(name:string): void;
 		/**
 		 * @description Scales all length values by 'scale'
 		 * @returns {void}
 		 */
-		scaleLengthValues(): void;
+		scaleLengthValues(scale:number): void;
 		/**
 		 * @description Sets all the fields in this DimensionStyle to be not overridden
 		Does not change any dimstyle_id's or parent_id's
@@ -1890,55 +2041,70 @@ declare module 'rhino3dm' {
 		 * @returns {boolean} True if this is a child of the DimensionStyle with Parent
 		False otherwise.
 		 */
-		isChildOf(): boolean;
+		isChildOf(id:string): boolean;
 	}
 
 	class Displacement {
 		/**
+		 * Specifies whether the displacement feature is enabled or not.
 		 */
-		on: any;
+		on: boolean;
 		/**
+		 * Specifies whether the displacement feature is enabled or not.
 		 */
-		texture: any;
+		texture: string;
 		/**
+		 * Specifies the amount of displacement for the black color in the texture.
 		 */
-		blackPoint: any;
+		blackPoint: number;
 		/**
+		 * Specifies the amount of displacement for the white color in the texture.
 		 */
-		whitePoint: any;
+		whitePoint: number;
 		/**
+		 * Specifies the maximum angle between face normals of adjacent faces that will get welded together.
 		 */
-		postWeldAngle: any;
+		postWeldAngle: number;
 		/**
+		 * Specifies whether or not to perform a fairing step. Fairing straightens rough feature edges.
 		 */
-		fairingOn: any;
+		fairingOn: boolean;
 		/**
+		 * Specifies the number of steps for the fairing process. Fairing straightens rough feature edges.
 		 */
-		fairing: any;
+		fairing: number;
 		/**
+		 * Specifies how many faces the reduction post process should target.
 		 */
-		finalMaxFaces: any;
+		finalMaxFaces: number;
 		/**
+		 * Specifies whether to perform a mesh reduction as a post process to simplify the result of displacement.
 		 */
-		finalMaxFacesOn: any;
+		finalMaxFacesOn: boolean;
 		/**
+		 * Specifies how densely the object is initially subdivided. The lower the value, the higher the resolution of the displaced mesh.
 		 */
-		initialQuality: any;
+		initialQuality: number;
 		/**
+		 * Specifies which texture mapping channel is used for the displacement texture.
 		 */
-		mappingChannel: any;
+		mappingChannel: number;
 		/**
+		 * Specifies in megabytes how much memory can be allocated for use by the displacement mesh.
 		 */
-		meshMemoryLimit: any;
+		meshMemoryLimit: number;
 		/**
+		 * Specifies the number of refinement passes
 		 */
-		refineSteps: any;
+		refineSteps: number;
 		/**
+		 * Specifies how sensitive the divider for contrasts is on the displacement texture- Specify 1 to split all mesh edges on each refine step. Specify 0.99 to make even slight contrasts on the displacement texture cause edges to be split. Specifying 0.01 only splits edges where heavy contrast exists.
 		 */
-		refineSensitivity: any;
+		refineSensitivity: number;
 		/**
+		 * Specifies which formula is used to calculate sweep resolution from initial quality.
 		 */
-		sweepResolutionFormula: any;
+		sweepResolutionFormula: DisplacementSweepResolutionFormulas;
 	}
 
 	class Dithering {
@@ -1947,44 +2113,44 @@ declare module 'rhino3dm' {
 		enabled: boolean;
 		/**
 		 */
-		method: Methods;
+		method: DitheringMethods;
 	}
 
 	class DracoCompression {
 		/** ... */
-		static compress(): void;
+		static compress(mesh:Mesh): DracoCompression;
 		/** ... */
-		static compressOptions(): void;
+		static compressOptions(mesh:Mesh, options: DracoCompressionOptions): DracoCompression;
 		/** ... */
-		static decompressByteArray(): void;
+		static decompressByteArray(): GeometryBase;
 		/** ... */
-		static decompressBase64String(): void;
+		static decompressBase64String(): GeometryBase;
 		/** ... */
-		toBase64String(): void;
+		toBase64String(): string;
 	}
 
 	class DracoCompressionOptions {
 		/**
 		 */
-		compressionLevel: any;
+		compressionLevel: number;
 		/**
 		 */
-		positionQuantizationBits: any;
+		positionQuantizationBits: number;
 		/**
 		 */
-		textureCoordintateQuantizationBits: any;
+		textureCoordintateQuantizationBits: number;
 		/**
 		 */
-		normalQuantizationBits: any;
+		normalQuantizationBits: number;
 		/**
 		 */
-		includeNormals: any;
+		includeNormals: boolean;
 		/**
 		 */
-		includeTextureCoordinates: any;
+		includeTextureCoordinates: boolean;
 		/**
 		 */
-		includeVertexColors: any;
+		includeVertexColors: boolean;
 	}
 
 	class EarthAnchorPoint {
@@ -2049,23 +2215,29 @@ declare module 'rhino3dm' {
 
 	class EdgeSoftening {
 		/**
+		 * Specifies whether edge softening is enabled or not.
 		 */
-		on: any;
+		on: boolean;
 		/**
+		 * The softening radius.
 		 */
-		softening: any;
+		softening: number;
 		/**
+		 * Specifies whether to chamfer the edges.
 		 */
-		chamfer: any;
+		chamfer: boolean;
 		/**
+		 * Specifies whether the edges are faceted.
 		 */
-		faceted: any;
+		faceted: boolean;
 		/**
+		 * Threshold angle (in degrees) which controls whether an edge is softened or not. The angle refers to the angles between the adjacent faces of an edge.
 		 */
-		edgeAngleThreshold: any;
+		edgeAngleThreshold: number;
 		/**
+		 * Specifies whether to soften edges despite too large a radius.
 		 */
-		forceSoftening: any;
+		forceSoftening: boolean;
 	}
 
 	class Ellipse {
@@ -2074,29 +2246,37 @@ declare module 'rhino3dm' {
 	class EmbeddedFile {
 		/**
 		 */
-		length: any;
+		length: number;
 		/**
+		 * @returns {string} the fully-qualified filename of the embedded file. This filename may or may not refer to a local file depending on the way the embedded file was loaded. For example, if it was loaded from an archive, the filename could be that of a file on a different computer.
 		 */
-		fileName: any;
-		/** ... */
-		write(): void;
+		fileName: string;
+		/**
+		 * Saves the contents of the embedded file to a local file.
+		 * @param {string} path
+		 * @returns {boolean} Returns true if successful, else false.
+		*/
+		write(path:string): boolean;
 		/** ... */
-		clear(): void;
+		clear(): boolean;
 	}
 
 	class Environment {
 		/**
-		 * The background color.
+		 * The background color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		backgroundColor: number[];
+		backgroundColor: object;
 		/**
 		 * The background projection.
 		 */
-		backgroundProjection: BackgroundProjections;
-		/** ... */
-		getBackgroundImage(): void;
+		backgroundProjection: EnvironmentBackgroundProjections;
+		/** 
+		 * The background image texture.
+		 * @returns {Texture}
+		*/
+		getBackgroundImage(): Texture;
 		/** ... */
-		setBackgroundImage(): void;
+		setBackgroundImage(texture:Texture): void;
 	}
 
 	class Extrusion extends Surface {
@@ -2290,7 +2470,7 @@ declare module 'rhino3dm' {
 		 */
 		getMesh(meshType:MeshType): Mesh;
 		/** ... */
-		setMesh(): void;
+		setMesh(mesh:Mesh, meshType:MeshType): boolean;
 	}
 
 	class File3dm {
@@ -2318,7 +2498,7 @@ declare module 'rhino3dm' {
 		 * Get the DateTime that this file was originally created. If the
 		 * value is not set in the 3dm file, then DateTime.MinValue is returned
 		 */
-		created: DateTime;
+		created: Date;
 		/**
 		 * Gets a string that names the user who created the file.
 		 */
@@ -2327,7 +2507,7 @@ declare module 'rhino3dm' {
 		 * Get the DateTime that this file was last edited. If the
 		 * value is not set in the 3dm file, then DateTime.MinValue is returned
 		 */
-		lastEdited: DateTime;
+		lastEdited: Date;
 		/**
 		 * Gets a string that names the user who last edited the file.
 		 */
@@ -2342,92 +2522,92 @@ declare module 'rhino3dm' {
 		 * @description Read a 3dm file from a byte array
 		 * @returns {File3dm} New File3dm on success, null on error.
 		 */
-		static fromByteArray(): File3dm;
+		static fromByteArray(length:number, buffer: Uint8Array): File3dm;
 		/** ... */
-		settings(): void;
+		settings(): File3dmSettings;
 		/** ... */
-		objects(): void;
+		objects(): File3dmObjectTable;
 		/** ... */
-		materials(): void;
+		materials(): File3dmMaterialTable;
 		/** ... */
-		linetypes(): void;
+		linetypes(): File3dmLinetypeTable;
 		/** ... */
-		bitmaps(): void;
+		bitmaps(): File3dmBitmapTable;
 		/** ... */
-		layers(): void;
+		layers(): File3dmLayerTable;
 		/** ... */
-		groups(): void;
+		groups(): File3dmGroupTable;
 		/** ... */
-		dimstyles(): void;
+		dimstyles(): File3dmDimStyleTable;
 		/** ... */
-		instanceDefinitions(): void;
+		instanceDefinitions(): File3dmInstanceDefinitionTable;
 		/** ... */
-		views(): void;
+		views(): File3dmViewTable;
 		/** ... */
-		namedViews(): void;
+		namedViews(): File3dmViewTable;
 		/** ... */
-		plugInData(): void;
+		plugInData(): File3dmPlugInDataTable;
 		/** ... */
-		strings(): void;
+		strings(): File3dmStringTable;
 		/** ... */
-		embeddedFiles(): void;
+		embeddedFiles(): File3dmEmbeddedFileTable;
 		/** ... */
-		renderContent(): void;
+		renderContent(): File3dmRenderContentTable;
 		/** ... */
-		encode(): void;
+		encode(): string;
 		/** ... */
-		encodeOptions(): void;
+		encodeOptions(options:File3dmWriteOptions): string;
 		/**
 		 * @description Write to an in-memory byte[]
 		 * @returns {Uint8Array}
 		 */
 		toByteArray(): Uint8Array;
 		/** ... */
-		toByteArrayOptions(): void;
+		toByteArrayOptions(options:File3dmWriteOptions): Uint8Array;
 		/** ... */
-		static decode(): void;
+		static decode(buffer: string): File3dm;
 		/** ... */
-		embeddedFilePaths(): void;
+		embeddedFilePaths(): string[];
 		/** ... */
-		getEmbeddedFileAsBase64(): void;
+		getEmbeddedFileAsBase64(path: string): void;
 		/** ... */
-		getEmbeddedFileAsBase64Strict(): void;
+		getEmbeddedFileAsBase64Strict(path:string, string:boolean): void;
 		/** ... */
-		rdkXml(): void;
+		rdkXml(): string;
 	}
 
 	class File3dmBitmapTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Bitmap;
 		/** ... */
-		add(): void;
+		add(bitmap: Bitmap): void;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): Bitmap;
 		/** ... */
-		findId(): void;
+		findId(id:string): Bitmap;
 	}
 
 	class File3dmDecalTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Decal;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): Decal;
 	}
 
 	class File3dmDimStyleTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): DimensionStyle;
 		/** ... */
-		add(): void;
+		add(dimStyle: DimensionStyle): void;
 		/**
 		 * @description Retrieves a DimensionStyle object based on Index. This search type of search is discouraged.
 		We are moving towards using only IDs for all tables.
@@ -2436,35 +2616,35 @@ declare module 'rhino3dm' {
 		 */
 		findIndex(index:number): DimensionStyle;
 		/** ... */
-		findId(): void;
+		findId(): DimensionStyle;
 	}
 
 	class File3dmEmbeddedFileTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): EmbeddedFile;
 		/** ... */
-		add(): void;
+		add(file: EmbeddedFile): void;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): EmbeddedFile;
 	}
 
 	class File3dmGroupTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Group;
 		/** ... */
-		add(): void;
+		add(group:Group): void;
 		/** ... */
-		delete(): void;
+		delete(Group): boolean;
 		/** ... */
-		deleteIndex(): void;
+		deleteIndex(index:number): boolean;
 		/** ... */
-		deleteId(): void;
+		deleteId(id:string): boolean;
 		/**
 		 * @description Retrieves a Group object based on an index. This search type of search is discouraged.
 		We are moving towards using only IDs for all tables.
@@ -2483,43 +2663,33 @@ declare module 'rhino3dm' {
 	class File3dmInstanceDefinitionTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
-		/**
-		 * @description Adds an instance definition to the instance definition table.
-		 * @param {string} name The definition name.
-		 * @param {string} description The definition description.
-		 * @param {string} url A URL or hyperlink.
-		 * @param {string} urlTag A description of the URL or hyperlink.
-		 * @param {number[]} basePoint A base point.
-		 * @param {GeometryBase[]} geometry An array, a list or any enumerable set of geometry.
-		 * @param {ObjectAttributes[]} attributes An array, a list or any enumerable set of attributes.
-		 * @returns {number} >=0  index of instance definition in the instance definition table. -1 on failure.
-		 */
-		add(name:string,description:string,url:string,urlTag:string,basePoint:number[],geometry:GeometryBase[],attributes:ObjectAttributes[]): number;
+		get(index:number): InstanceDefinition;
+		/** ... */
+		add(idef:InstanceDefinition): void;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): InstanceDefinition;
 		/** ... */
-		findId(): void;
+		findId(id: string): InstanceDefinition;
 	}
 
 	class File3dmLayerTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Layer;
 		/** ... */
-		add(): void;
+		add(layer:Layer): number;
 		/**
 		 * @description Easy way to add a layer to the model
 		 * @param {string} name new layer name
-		 * @param {number[]} color new layer color
+		 * @param {object} color new layer color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 * @returns {number} If layer_name is valid, the layer's index (>=0) is returned. Otherwise,
 		RhinoMath.UnsetIntIndex is returned.
 		 */
-		addLayer(name:string,color:number[]): number;
+		addLayer(name:string,color:object): number;
 		/**
 		 * @description Finds a Layer given its name.
 		 * @param {string} name The name of the Layer to be searched.
@@ -2535,19 +2705,19 @@ declare module 'rhino3dm' {
 		 */
 		findIndex(index:number): Layer;
 		/** ... */
-		findId(): void;
+		findId(id:string): Layer;
 	}
 
 	class File3dmLinetypeTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Linetype;
 		/** ... */
-		add(): void;
+		add(lineType: Linetype): void;
 		/** ... */
-		delete(): void;
+		delete(id:string): void;
 		/**
 		 * @description Retrieves a Linetype object based on Index. This search type of search is discouraged.
 		We are moving towards using only IDs for all tables.
@@ -2556,7 +2726,7 @@ declare module 'rhino3dm' {
 		 */
 		findIndex(index:number): Linetype;
 		/** ... */
-		findId(): void;
+		findId(id:string): Linetype;
 		/**
 		 * @description Finds a Linetype given its name.
 		 * @param {string} name The name of the Linetype to be searched.
@@ -2564,19 +2734,19 @@ declare module 'rhino3dm' {
 		 */
 		findName(name:string): Linetype;
 		/** ... */
-		fromAttributes(): void;
+		fromAttributes(attributes:ObjectAttributes): Linetype;
 		/** ... */
-		fromLayerIndex(): void;
+		fromLayerIndex(index:number): Linetype;
 	}
 
 	class File3dmMaterialTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): Material;
 		/** ... */
-		add(): void;
+		add(material:Material): void;
 		/**
 		 * @description Retrieves a material based on Index. This search type of search is discouraged.
 		We are moving towards using only IDs for all tables.
@@ -2585,39 +2755,39 @@ declare module 'rhino3dm' {
 		 */
 		findIndex(index:number): Material;
 		/** ... */
-		findId(): void;
+		findId(id:string): Material;
 		/** ... */
-		findFromAttributes(): void;
+		findFromAttributes(attributes:ObjectAttributes): Material;
 	}
 
 	class File3dmMeshModifiers {
 		/** ... */
-		displacement(): void;
+		displacement(): Displacement;
 		/** ... */
-		edgeSoftening(): void;
+		edgeSoftening(): EdgeSoftening;
 		/** ... */
-		thickening(): void;
+		thickening(): Thickening;
 		/** ... */
-		curvePiping(): void;
+		curvePiping(): CurvePiping;
 		/** ... */
-		shutLining(): void;
+		shutLining(): ShutLining;
 		/** ... */
-		createDisplacement(): void;
+		createDisplacement(): Displacement;
 		/** ... */
-		createEdgeSoftening(): void;
+		createEdgeSoftening(): EdgeSoftening;
 		/** ... */
-		createThickening (): void;
+		createThickening (): Thickening;
 		/** ... */
-		createCurvePiping(): void;
+		createCurvePiping(): CurvePiping;
 		/** ... */
-		createShutLining (): void;
+		createShutLining (): ShutLining;
 	}
 
 	class File3dmObject {
 		/** ... */
-		attributes(): void;
+		attributes(): ObjectAttributes;
 		/** ... */
-		geometry(): void;
+		geometry(): GeometryBase;
 	}
 
 	class File3dmObjectTable {
@@ -2626,9 +2796,7 @@ declare module 'rhino3dm' {
 		 */
 		count: number;
 		/** ... */
-		get(): void;
-		/** ... */
-		addPointXYZ(): void;
+		get(index:number): File3dmObject;
 		/**
 		 * @description Adds a point object to the table.
 		 * @param {number} x X component of point coordinate.
@@ -2636,7 +2804,9 @@ declare module 'rhino3dm' {
 		 * @param {number} z Z component of point coordinate.
 		 * @returns {string} id of new object.
 		 */
-		addPoint(x:number,y:number,z:number): string;
+		addPointXYZ(x:number, y:number,z:number): string;
+		/** */
+		addPoint(point:number[]): string;
 		/**
 		 * @description Adds a point cloud object to the document.
 		 * @param {PointCloud} cloud PointCloud to add.
@@ -2713,19 +2883,20 @@ declare module 'rhino3dm' {
 		addBrep(brep:Brep): string;
 		/**
 		 * @description Duplicates the object, then adds a copy of the object to the document.
-		 * @param {File3dmObject} item The item to duplicate and add.
-		 * @returns {void}
+		 * @param {ObjectAttributes} attributes
+		 * @param {GeometryBase} geometry
+		 * @returns {string} A unique identifier for the object.
 		 */
-		add(item:File3dmObject): void;
+		add(attributes: ObjectAttributes, geometry: GeometryBase): string;
 		/**
 		 * @description Gets the bounding box containing every object in this table.
 		 * @returns {BoundingBox} The computed bounding box.
 		 */
 		getBoundingBox(): BoundingBox;
 		/** ... */
-		deleteItem(): void;
+		deleteItem(id:string): void;
 		/** ... */
-		findId(): void;
+		findId(id:string): File3dmObject;
 	}
 
 	class File3dmPlugInData {
@@ -2737,36 +2908,36 @@ declare module 'rhino3dm' {
 		 */
 		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): File3dmPlugInData;
 	}
 
 	class File3dmPostEffectTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): PostEffect;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): PostEffect;
 		/** ... */
-		findId(): void;
+		findId(id:string): PostEffect;
 	}
 
 	class File3dmRdkDocumentData extends File3dmPlugInData {
 		/** ... */
-		rdkXml(): void;
+		rdkXml(): string;
 	}
 
 	class File3dmRenderContentTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		add(): void;
+		add(renderContent:RenderContent): void;
 		/** ... */
-		get(): void;
+		get(index:number): RenderContent;
 		/** ... */
-		findId(): void;
+		findId(id:string): RenderContent;
 	}
 
 	class File3dmSettings {
@@ -2781,7 +2952,7 @@ declare module 'rhino3dm' {
 		modelBasePoint: number[];
 		/**
 		 */
-		earthAnchorPoint: any;
+		earthAnchorPoint: EarthAnchorPoint;
 		/**
 		 * Gets or sets the model space absolute tolerance.
 		 */
@@ -2823,21 +2994,21 @@ declare module 'rhino3dm' {
 		 */
 		pageUnitSystem: UnitSystem;
 		/** ... */
-		renderSettings(): void;
+		renderSettings(): RenderSettings;
 	}
 
 	class File3dmShutLiningCurveTable {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): ShutLiningCurve;
 		/** ... */
-		add(): void;
+		add(id:string): void;
 		/** ... */
-		findIndex(): void;
+		findIndex(index:number): ShutLiningCurve;
 		/** ... */
-		findId(): void;
+		findId(id:string): ShutLiningCurve;
 	}
 
 	class File3dmStringTable {
@@ -2846,7 +3017,7 @@ declare module 'rhino3dm' {
 		 */
 		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): object;
 		/**
 		 * @description Returns a string value at a given index.
 		 * @param {number} i The index at which to get the value.
@@ -2854,9 +3025,9 @@ declare module 'rhino3dm' {
 		 */
 		getvalue(i:number): string;
 		/** ... */
-		set(): void;
+		set(key:string, value:string): void;
 		/** ... */
-		documentUserTextCount(): void;
+		documentUserTextCount(): number;
 		/**
 		 * @description Removes document strings from the 3dm file.
 		 * @param {string} section name of section to delete. If null, all sections will be deleted.
@@ -2872,14 +3043,14 @@ declare module 'rhino3dm' {
 		 */
 		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): ViewInfo;
 		/** ... */
-		set(): void;
+		set(index:number, view: ViewInfo): void;
 		/**
-		 * @description Adds a
+		 * @description Adds a view
 		 * @returns {void}
 		 */
-		add(): void;
+		add(view: ViewInfo): void;
 	}
 
 	class File3dmWriteOptions {
@@ -3064,7 +3235,7 @@ declare module 'rhino3dm' {
 		/**
 		 * Texture mapping offset in world units.
 		 */
-		textureOffset: Rhino.Vector2d;
+		textureOffset: number[];
 		/**
 		 * Texture offset locked.
 		 */
@@ -3076,7 +3247,7 @@ declare module 'rhino3dm' {
 		/**
 		 * Texture mapping single UV span size in world units.
 		 */
-		textureSize: Rhino.Vector2d;
+		textureSize: number[];
 		/**
 		 * Texture mapping rotation around world origin + offset in degrees.
 		 */
@@ -3086,13 +3257,13 @@ declare module 'rhino3dm' {
 	class Group extends CommonObject {
 		/**
 		 */
-		name: any;
+		name: string;
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 */
-		index: any;
+		index: number;
 	}
 
 	class Hatch extends GeometryBase {
@@ -3126,35 +3297,47 @@ declare module 'rhino3dm' {
 	class InstanceDefinition extends CommonObject {
 		/**
 		 */
-		description: any;
+		description: string;
 		/**
 		 */
-		name: any;
+		name: string;
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 */
-		sourceArchive: any;
+		sourceArchive: string;
 		/**
 		 */
-		updateType: any;
+		updateType: InstanceDefinitionUpdateType;
 		/** ... */
-		getObjectIds(): void;
+		getObjectIds(): object;
 		/** ... */
-		isInstanceGeometryId(): void;
+		isInstanceGeometryId(id: string): boolean;
 	}
 
 	class InstanceReference extends GeometryBase {
 		/**
 		 */
-		parentIdefId: any;
+		parentIdefId: string;
 		/**
 		 */
-		xform: any;
+		xform: Transform;
 	}
 
 	class Intersection {
+		/**
+		 * @description Intersects two lines.
+		 * @param {Line} lineA First line for intersection.
+		 * @param {Line} lineB Second line for intersection.
+		 * @returns {Array} [boolean, number, number]
+		 * (boolean) true if a closest point can be calculated and the result passes the tolerance parameter test; otherwise false.
+		 * (number) Parameter on lineA that is closest to LineB.
+		The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
+		 * (number) Parameter on lineB that is closest to LineA.
+		The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
+		 */
+		static lineLine(lineA:Line,lineB:Line): object;
 		/**
 		 * @description Intersects two lines.
 		 * @param {Line} lineA First line for intersection.
@@ -3170,9 +3353,7 @@ declare module 'rhino3dm' {
 		 * (number) Parameter on lineB that is closest to LineA.
 		The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
 		 */
-		static lineLine(lineA:Line,lineB:Line,tolerance:number,finiteSegments:boolean): object;
-		/** ... */
-		static lineLineTolerance(): void;
+		static lineLineTolerance(lineA:Line,lineB:Line,tolerance:number,finiteSegments:boolean): object;
 		/**
 		 * @description Intersects a line and a plane. This function only returns true if the
 		intersection result is a single point (i.e. if the line is coincident with
@@ -3306,13 +3487,13 @@ declare module 'rhino3dm' {
 		 */
 		igesLevel: number;
 		/**
-		 * Gets or sets the display color for this layer.
+		 * Gets or sets the display color for this layer in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		color: number[];
+		color: object;
 		/**
-		 * Gets or sets the plot color for this layer.
+		 * Gets or sets the plot color for this layer in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		plotColor: number[];
+		plotColor: object;
 		/**
 		 * Gets or sets the weight of the plotting pen in millimeters.
 		 * A weight of 0.0 indicates the "default" pen weight should be used.
@@ -3333,13 +3514,13 @@ declare module 'rhino3dm' {
 		renderMaterialIndex: number;
 		/**
 		 */
-		visible: any;
+		visible: boolean;
 		/**
 		 */
-		locked: any;
+		locked: boolean;
 		/**
 		 */
-		expanded: any;
+		expanded: boolean;
 		/**
 		 * @description Verifies that a layer has per viewport settings.
 		 * @param {string} viewportId If not Guid.Empty, then checks for settings for that specific viewport.
@@ -3357,16 +3538,16 @@ declare module 'rhino3dm' {
 		/**
 		 * @description Gets the display color for this layer.
 		 * @param {string} viewportId If not Guid.Empty, then the setting applies only to the viewport with the specified id.
-		 * @returns {number[]} The display color.
+		 * @returns {object} The display color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		perViewportColor(viewportId:string): number[];
+		perViewportColor(viewportId:string): object;
 		/**
 		 * @description Sets the display color for this layer.
 		 * @param {string} viewportId If not Guid.Empty, then the setting applies only to the viewport with the specified id.
-		 * @param {number[]} color The display color.
+		 * @param {object} color The display color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 * @returns {void}
 		 */
-		setPerViewportColor(viewportId:string,color:number[]): void;
+		setPerViewportColor(viewportId:string,color:object): void;
 		/**
 		 * @description Remove any per viewport layer color setting so the layer's overall setting will be used for all viewports.
 		 * @param {string} viewportId If not Guid.Empty, then the setting for this viewport will be deleted.
@@ -3478,17 +3659,17 @@ declare module 'rhino3dm' {
 		 */
 		powerCandela: number;
 		/**
-		 * Gets or sets the ambient color.
+		 * Gets or sets the ambient color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		ambient: number[];
+		ambient: object;
 		/**
-		 * Gets or sets the diffuse color.
+		 * Gets or sets the diffuse color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		diffuse: number[];
+		diffuse: object;
 		/**
-		 * Gets or sets the specular color.
+		 * Gets or sets the specular color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		specular: number[];
+		specular: object;
 		/**
 		 * Gets or Sets the attenuation vector.
 		 */
@@ -3584,17 +3765,17 @@ declare module 'rhino3dm' {
 	class LinearWorkflow {
 		/**
 		 */
-		preProcessTexturesOn: any;
+		preProcessTexturesOn: boolean;
 		/**
 		 */
-		preProcessColorsOn: any;
+		preProcessColorsOn: boolean;
 		/**
 		 * Linear workflow pre-process gamma value. This is currently the same as the post-process gamma value.
 		 */
 		preProcessGamma: number;
 		/**
 		 */
-		preProcessGammaOn: any;
+		preProcessGammaOn: boolean;
 		/**
 		 * Linear workflow post-process gamma value.
 		 */
@@ -3621,7 +3802,7 @@ declare module 'rhino3dm' {
 		name: string;
 		/**
 		 */
-		index: any;
+		index: number;
 		/**
 		 * Total length of one repeat of the pattern.
 		 */
@@ -3664,25 +3845,25 @@ declare module 'rhino3dm' {
 		 */
 		removeSegment(index:number): boolean;
 		/** ... */
-		clearPattern(): void;
+		clearPattern(): boolean;
 		/** ... */
-		static border(): void;
+		static border(): Linetype;
 		/** ... */
-		static byLayer(): void;
+		static byLayer(): Linetype;
 		/** ... */
-		static byParent(): void;
+		static byParent(): Linetype;
 		/** ... */
-		static center(): void;
+		static center(): Linetype;
 		/** ... */
-		static continuous(): void;
+		static continuous(): Linetype;
 		/** ... */
-		static dashdot(): void;
+		static dashdot(): Linetype;
 		/** ... */
-		static dashed(): void;
+		static dashed(): Linetype;
 		/** ... */
-		static dots(): void;
+		static dots(): Linetype;
 		/** ... */
-		static hidden(): void;
+		static hidden(): Linetype;
 	}
 
 	class Material extends ModelComponent {
@@ -3754,7 +3935,7 @@ declare module 'rhino3dm' {
 		 */
 		transparentColor: number[];
 		/** ... */
-		static compareAppearance(): void;
+		static compareAppearance(material1: Material, material2: Material): number;
 		/**
 		 * @description Set material to default settings.
 		 * @returns {void}
@@ -3764,50 +3945,50 @@ declare module 'rhino3dm' {
 		 * @description Get the texture that corresponds with the specified texture type for this material.
 		 * @returns {Texture}
 		 */
-		getTexture(): Texture;
+		getTexture(type: TextureType): Texture;
 		/**
 		 * @returns {Texture}
 		 */
 		getBitmapTexture(): Texture;
 		/** ... */
-		setBitmapTextureFilename(): void;
+		setBitmapTextureFilename(filename: string): boolean;
 		/**
 		 * @returns {boolean}
 		 */
-		setBitmapTexture(): boolean;
+		setBitmapTexture(texture: Texture): boolean;
 		/**
 		 * @description Gets the bump texture of this material.
 		 * @returns {Texture} A texture; or null if no bump texture has been added to this material.
 		 */
 		getBumpTexture(): Texture;
 		/** ... */
-		setBumpTextureFilename(): void;
+		setBumpTextureFilename(filename: string): boolean;
 		/**
 		 * @returns {boolean}
 		 */
-		setBumpTexture(): boolean;
+		setBumpTexture(texture: Texture): boolean;
 		/**
 		 * @returns {Texture}
 		 */
 		getEnvironmentTexture(): Texture;
 		/** ... */
-		setEnvironmentTextureFilename(): void;
+		setEnvironmentTextureFilename(filename: string): boolean;
 		/**
 		 * @returns {boolean}
 		 */
-		setEnvironmentTexture(): boolean;
+		setEnvironmentTexture(texture: Texture): boolean;
 		/**
 		 * @returns {Texture}
 		 */
 		getTransparencyTexture(): Texture;
 		/** ... */
-		setTransparencyTextureFilename(): void;
+		setTransparencyTextureFilename(filename: string): boolean;
 		/**
 		 * @returns {boolean}
 		 */
-		setTransparencyTexture(): boolean;
+		SetTransparencyTexture(texture: Texture): boolean;
 		/** ... */
-		physicallyBased(): void;
+		physicallyBased(): PhysicallyBasedMaterial;
 		/**
 		 * @returns {void}
 		 */
@@ -3838,25 +4019,30 @@ declare module 'rhino3dm' {
 		 * @returns {Mesh} mesh representing control net on success, null on failure
 		 */
 		static createFromSubDControlNet(): Mesh;
-		/** ... */
-		static toThreejsJSONMerged(): void;
+		/**
++		 * @description Cretes a Three.js bufferGeometry from an array of Rhino meshes.
++		 * @param {Mesh[]} meshes The array of Rhino meshes.
++		 * @param {boolean} rotateYUp Whether or not to orient the result to Y up.
++		 * @returns {object} A Three.js bufferGeometry.
++		 */
+		static toThreejsJSONMerged(meshes: Mesh[], rotateYUp: boolean ): object;
 		/**
 		 * @description Returns true if every mesh "edge" has at most two faces.
-		 * @returns {boolean} true if the mesh is manifold, false otherwise.
+		 * @returns {object}
 		 */
-		isManifold(): boolean;
+		isManifold(): object;
 		/** ... */
-		vertices(): void;
+		vertices(): MeshVertexList;
 		/** ... */
-		topologyEdges(): void;
+		topologyEdges(): MeshTopologyEdgeList;
 		/** ... */
-		faces(): void;
+		faces(): MeshFaceList;
 		/** ... */
-		normals(): void;
+		normals(): MeshNormalList;
 		/** ... */
-		vertexColors(): void;
+		vertexColors(): MeshVertexColorList;
 		/** ... */
-		textureCoordinates(): void;
+		textureCoordinates(): MeshTextureCoordinateList;
 		/**
 		 * @description Removes all texture coordinate information from this mesh.
 		 * @returns {void}
@@ -3911,12 +4097,23 @@ declare module 'rhino3dm' {
 		 * @returns {boolean} true on success
 		 */
 		createPartitions(): boolean;
-		/** ... */
-		toThreejsJSON(): void;
-		/** ... */
-		toThreejsJSONRotate(): void;
-		/** ... */
-		static createFromThreejsJSON(): void;
+		/**
++		 * @description Creates a Three.js bufferGeometry from a Rhino mesh. 
++		 * @returns {object} A Three.js bufferGeometry.
++		 */
+		toThreejsJSON(): object;
+		/**
++		 * @description Creates a Three.js bufferGeometry from a Rhino mesh. 
++		 * @param {boolean} rotateToYUp Rotate the result to Y up.
++		 * @returns {object} A Three.js bufferGeometry.
++		 */
+		toThreejsJSON(rotateToYUp: boolean): object;	
+		/**
++		 * @description Creates a Rhino mesh from a Three.js buffer geometry. 
++		 * @param {object} object A js object in the form of { data: bufferGeometry }
++		 * @returns {Mesh}
++		 */
+		static createFromThreejsJSON( object: object ): Mesh;
 	}
 
 	class MeshFaceList {
@@ -3937,7 +4134,7 @@ declare module 'rhino3dm' {
 		 */
 		capacity: number;
 		/** ... */
-		get(): void;
+		get(index: number): number[];
 		/**
 		 * @description Gets the 3D location of the vertices forming a face.
 		 * @param {number} faceIndex A face index.
@@ -3968,13 +4165,13 @@ declare module 'rhino3dm' {
 		 */
 		destroy(): void;
 		/** ... */
-		addTriFace(): void;
+		addTriFace(vertex1:number, vertex2:number, vertex3:number): number;
 		/** ... */
-		addQuadFace(): void;
+		addQuadFace(vertex1:number, vertex2:number, vertex3:number, vertex4:number): number;
 		/** ... */
-		setTriFace(): void;
+		setTriFace(index:number, vertex1:number, vertex2:number, vertex3:number): boolean;
 		/** ... */
-		setQuadFace(): void;
+		setQuadFace(index:number, vertex1:number, vertex2:number, vertex3:number, vertex4:number): boolean;
 		/**
 		 * @description Splits all quads along the short diagonal.
 		 * @returns {boolean} true on success, false on failure.
@@ -4130,39 +4327,39 @@ declare module 'rhino3dm' {
 
 		constructor(density: number, minimumEdgeLength: number);
 		/** ... */
-		static default(): void;
+		static default(): MeshingParameters;
 		/** ... */
-		static fastRenderMesh(): void;
+		static fastRenderMesh(): MeshingParameters;
 		/** ... */
-		static qualityRenderMesh(): void;
+		static qualityRenderMesh(): MeshingParameters;
 		/** ... */
-		static defaultAnalysisMesh(): void;
+		static defaultAnalysisMesh(): MeshingParameters;
 		/** ... */
-		toJSON(): void;
+		toJSON(): object;
 		/** ... */
-		encode(): void;
+		encode(): object;
 		/** ... */
-		static decode(): void;
+		static decode(json:object): MeshingParameters;
 	}
 
 	class MeshNormalList {
 		/**
 		 */
-		count: any;
+		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): number[];
 		/** ... */
-		set(): void;
+		set(index:number, normal: number[]): void;
 		/** ... */
 		clear(): void;
 		/** ... */
 		destroy(): void;
 		/** ... */
-		add(): void;
+		add(x:number, y:number, z:number): number;
 		/** ... */
-		computeNormals(): void;
+		computeNormals(): boolean;
 		/** ... */
-		unitizeNormals(): void;
+		unitizeNormals(): boolean;
 		/** ... */
 		flip(): void;
 	}
@@ -4173,9 +4370,9 @@ declare module 'rhino3dm' {
 		 */
 		count: number;
 		/** ... */
-		get(): void;
+		get(index:number): number[];
 		/** ... */
-		set(): void;
+		set(index:number, coordinate:number[]): void;
 		/**
 		 * @description Adds a new texture coordinate to the end of the Texture list.
 		 * @param {number} s S component of new texture coordinate.
@@ -4208,9 +4405,9 @@ declare module 'rhino3dm' {
 		 */
 		capacity: number;
 		/** ... */
-		get(): void;
+		get(index:number): object;
 		/** ... */
-		set(): void;
+		set(index:number, color:object): void;
 		/**
 		 * @description Clears the vertex color list on the mesh.
 		 * @returns {void}
@@ -4236,11 +4433,11 @@ declare module 'rhino3dm' {
 		 */
 		useDoublePrecisionVertices: boolean;
 		/** ... */
-		setCount(): void;
+		setCount(capacity:number): void;
 		/** ... */
-		get(): void;
+		get(index:number): number[];
 		/** ... */
-		set(): void;
+		set(index:number, vertex:number[]): void;
 		/**
 		 * @description Clears the Vertex list on the mesh.
 		 * @returns {void}
@@ -4353,14 +4550,14 @@ declare module 'rhino3dm' {
 		 * @description Gets a non-rational, degree 1 NURBS curve representation of the line.
 		 * @returns {NurbsCurve} Curve on success, null on failure.
 		 */
-		static createFromLine(): NurbsCurve;
+		static createFromLine(line:Line): NurbsCurve;
 		/**
 		 * @description Gets a rational degree 2 NURBS curve representation
 		of the arc. Note that the parameterization of NURBS curve
 		does not match arc's transcendental parameterization.
 		 * @returns {NurbsCurve} Curve on success, null on failure.
 		 */
-		static createFromArc(): NurbsCurve;
+		static createFromArc(arc:Arc): NurbsCurve;
 		/**
 		 * @description Gets a rational degree 2 NURBS curve representation
 		of the circle. Note that the parameterization of NURBS curve
@@ -4370,14 +4567,14 @@ declare module 'rhino3dm' {
 		parameter and the transcendental parameter.
 		 * @returns {NurbsCurve} Curve on success, null on failure.
 		 */
-		static createFromCircle(): NurbsCurve;
+		static createFromCircle(circle:Circle): NurbsCurve;
 		/**
 		 * @description Gets a rational degree 2 NURBS curve representation of the ellipse.
 		Note that the parameterization of the NURBS curve does not match
 		with the transcendental parameterization of the ellipsis.
 		 * @returns {NurbsCurve} A NURBS curve representation of this ellipse or null if no such representation could be made.
 		 */
-		static createFromEllipse(): NurbsCurve;
+		static createFromEllipse(ellipse:Ellipse): NurbsCurve;
 		/**
 		 * @description Constructs a 3D NURBS curve from a list of control points.
 		 * @param {boolean} periodic If true, create a periodic uniform curve. If false, create a clamped uniform curve.
@@ -4434,9 +4631,9 @@ declare module 'rhino3dm' {
 		 */
 		convertSpanToBezier(spanIndex:number): BezierCurve;
 		/** ... */
-		points(): void;
+		points(): NurbsCurvePointList;
 		/** ... */
-		knots(): void;
+		knots(): NurbsCurveKnotList;
 	}
 
 	class NurbsCurveKnotList {
@@ -4455,11 +4652,11 @@ declare module 'rhino3dm' {
 		 */
 		isClampedEnd: boolean;
 		/** ... */
-		get(): void;
+		get(index:number): void;
 		/** ... */
-		set(): void;
+		set(index:number, knot:number): void;
 		/** ... */
-		toList(): void;
+		toList(): number[];
 		/**
 		 * @description Inserts a knot and update control point locations.
 		Does not change parameterization or locus of curve.
@@ -4509,9 +4706,9 @@ declare module 'rhino3dm' {
 		 */
 		controlPolygonLength: number;
 		/** ... */
-		get(): void;
+		get(index:number): number[];
 		/** ... */
-		set(): void;
+		set(index:number, point:number[]): void;
 		/**
 		 * @description Use a combination of scaling and reparameterization to change the end weights to the specified values.
 		 * @param {number} w0 Weight for first control point.
@@ -4605,11 +4802,11 @@ declare module 'rhino3dm' {
 		 */
 		increaseDegreeV(desiredDegree:number): boolean;
 		/** ... */
-		knotsU(): void;
+		knotsU(): NurbsSurfaceKnotList;
 		/** ... */
-		knotsV(): void;
+		knotsV(): NurbsSurfaceKnotList;
 		/** ... */
-		points(): void;
+		points(): NurbsSurfacePointList;
 	}
 
 	class NurbsSurfaceKnotList {
@@ -4619,16 +4816,16 @@ declare module 'rhino3dm' {
 		count: number;
 		/**
 		 */
-		isClampedStart: any;
+		isClampedStart: boolean;
 		/**
 		 */
-		isClampedEnd: any;
+		isClampedEnd: boolean;
 		/** ... */
-		get(): void;
+		get(index:number): number;
 		/** ... */
-		set(): void;
+		set(index:number, knot:number): void;
 		/** ... */
-		toList(): void;
+		toList(): number[];
 		/**
 		 * @description Inserts a knot and update control point locations.
 		Does not change parameterization or locus of curve.
@@ -4671,7 +4868,7 @@ declare module 'rhino3dm' {
 	class NurbsSurfacePointList {
 		/**
 		 */
-		count: any;
+		count: number;
 		/**
 		 * Gets the number of control points in the U direction of this surface.
 		 */
@@ -4680,8 +4877,6 @@ declare module 'rhino3dm' {
 		 * Gets the number of control points in the V direction of this surface.
 		 */
 		countV: number;
-		/** ... */
-		get(): void;
 		/**
 		 * @description Gets a world 3-D, or Euclidean, control point at the given (u, v) index.
 		The 4-D representation is (x, y, z, 1.0).
@@ -4691,13 +4886,22 @@ declare module 'rhino3dm' {
 		 * (boolean) true on success, false on failure.
 		 * (number[]) Coordinate of control point.
 		 */
-		getPoint(u:number,v:number): object;
+		get(u:number, v:number): number[];
+		/**
+		 * @description Gets a world 3-D, or Euclidean, control point at the given (u, v) index.
+		The 4-D representation is (x, y, z, 1.0).
+		 * @param {number[]} uv Index of control point in the surface U and V direction.
+		 * @returns {Array} [boolean, number[]]
+		 * (boolean) true on success, false on failure.
+		 * (number[]) Coordinate of control point.
+		 */
+		getPoint(uv:number[]): number[];
 		/** ... */
-		set(): void;
+		set(u:number, v:number, point:number[]): void;
 		/** ... */
-		makeRational(): void;
+		makeRational(): boolean;
 		/** ... */
-		makeNonRational(): void;
+		makeNonRational(): boolean;
 	}
 
 	class ObjectAttributes extends CommonObject {
@@ -4757,7 +4961,7 @@ declare module 'rhino3dm' {
 		plotWeightSource: ObjectPlotWeightSource;
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 * Objects may have an URL. There are no restrictions on what value this
 		 * URL may have. As an example, if the object came from a commercial part
@@ -4784,13 +4988,13 @@ declare module 'rhino3dm' {
 		 */
 		materialSource: ObjectMaterialSource;
 		/**
-		 * If ON::color_from_object == ColorSource, then color is the object's display color.
+		 * If ON::color_from_object == ColorSource, then color is the object's display color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		objectColor: number[];
+		objectColor: object;
 		/**
-		 * If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color.
+		 * If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		plotColor: number[];
+		plotColor: object;
 		/**
 		 * Display order used to force objects to be drawn on top or behind each other.
 		 * Larger numbers draw on top of smaller numbers.
@@ -4826,7 +5030,7 @@ declare module 'rhino3dm' {
 		viewportId: string;
 		/**
 		 */
-		activeSpace: any;
+		activeSpace: ActiveSpace;
 		/**
 		 * number of groups object belongs to.
 		 */
@@ -4844,11 +5048,11 @@ declare module 'rhino3dm' {
 		 */
 		hasDisplayModeOverride(viewportId:string): boolean;
 		/** ... */
-		drawColor(): void;
+		drawColor(): object;
 		/** ... */
-		decals(): void;
+		decals(): File3dmDecalTable;
 		/** ... */
-		meshModifiers(): void;
+		meshModifiers(): File3dmMeshModifiers;
 		/**
 		 * @description Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.
 		 * @returns {number[]} An array of group indices. null might be returned in place of an empty array.
@@ -4879,7 +5083,7 @@ declare module 'rhino3dm' {
 	class PhysicallyBasedMaterial {
 		/**
 		 */
-		supported: any;
+		supported: boolean;
 		/**
 		 */
 		subsurface: number;
@@ -4929,19 +5133,22 @@ declare module 'rhino3dm' {
 		 */
 		opacityRoughness: number;
 		/**
+		 * Color in js format: {r:number,g:number,b:number,a:number} where number is 0.00 - 1.00 
 		 */
-		baseColor: Rhino.Display.Color4f;
+		baseColor: object;
 		/**
+		 * * Color in js format: {r:number,g:number,b:number,a:number} where number is 0.00 - 1.00 
 		 */
-		emissionColor: any;
+		emissionColor: object;
 		/**
+		 * * Color in js format: {r:number,g:number,b:number,a:number} where number is 0.00 - 1.00 
 		 */
-		subsurfaceScatteringColor: Rhino.Display.Color4f;
+		subsurfaceScatteringColor: object;
 	}
 
 	class Plane {
 		/** ... */
-		static worldXY(): void;
+		static worldXY(): Plane;
 	}
 
 	class PlaneSurface extends Surface {
@@ -4969,10 +5176,10 @@ declare module 'rhino3dm' {
 	class Point3dList {
 		/**
 		 */
-		capacity: any;
+		capacity: number;
 		/**
 		 */
-		count: any;
+		count: number;
 		/**
 		 * Even though this is a property, it is not a "fast" calculation. Every point is
 		 * evaluated in order to get the bounding box of the list.
@@ -4981,15 +5188,15 @@ declare module 'rhino3dm' {
 
 		constructor(initialCapacity: number);
 		/** ... */
-		get(): void;
+		get(index:number): number[];
 		/** ... */
-		set(): void;
+		set(index:number, point:number[]): void;
 		/** ... */
 		clear(): void;
 		/** ... */
-		insert(): void;
+		insert(index:number, point:number[]): void;
 		/** ... */
-		removeAt(): void;
+		removeAt(index:number): void;
 		/**
 		 * @description Adds a Point3d to the end of the list with given x,y,z coordinates.
 		 * @param {number} x The X coordinate.
@@ -5008,17 +5215,17 @@ declare module 'rhino3dm' {
 		 * @description Set all the X values for the points to a single value
 		 * @returns {void}
 		 */
-		setAllX(): void;
+		setAllX(xValue:number): void;
 		/**
 		 * @description Set all the Y values for the points to a single value
 		 * @returns {void}
 		 */
-		setAllY(): void;
+		setAllY(yValue:number): void;
 		/**
 		 * @description Set all the Z values for the points to a single value
 		 * @returns {void}
 		 */
-		setAllZ(): void;
+		setAllZ(zValue:number): void;
 	}
 
 	class PointCloud extends GeometryBase {
@@ -5042,7 +5249,7 @@ declare module 'rhino3dm' {
 		containsNormals: boolean;
 		/**
 		 */
-		containsValues: any;
+		containsValues: boolean;
 		/**
 		 * Gets a value indicating whether or not the points in this
 		 * point cloud have hidden flags assigned to them.
@@ -5087,31 +5294,31 @@ declare module 'rhino3dm' {
 		 */
 		add(point:number[]): void;
 		/** ... */
-		addPointNormal(): void;
+		addPointNormal(point:number[], normal:number[]): void;
 		/** ... */
-		addPointColor(): void;
+		addPointColor(point:number[], color:object): void;
 		/** ... */
-		addPointNormalColor(): void;
+		addPointNormalColor(point:number[], normal:number[], color:object): void;
 		/** ... */
-		addPointValue(): void;
+		addPointValue(point:number[], value:number): void;
 		/** ... */
-		addPointNormalColorValue(): void;
+		addPointNormalColorValue(point:number[], normal:number[], color:object, value:number): void;
 		/**
 		 * @description Appends a collection of points to this point cloud.
 		 * @param {Point3d[]} points Points to append.
 		 * @returns {void}
 		 */
-		addRange(points:Point3d[]): void;
+		addRange(points:number[][]): void;
 		/** ... */
-		addRangePointNormal(): void;
+		addRangePointNormal(points:number[][], normals:number[][]): void;
 		/** ... */
-		addRangePointColor(): void;
+		addRangePointColor(points:number[][], colors:object[]): void;
 		/** ... */
-		addRangePointNormalColor(): void;
+		addRangePointNormalColor(points:number[][], normals:number[][], colors:object[]): void;
 		/** ... */
-		addRangePointValue(): void;
+		addRangePointValue(points:number[][], values:number[]): void;
 		/** ... */
-		addRangePointNormalColorValue(): void;
+		addRangePointNormalColorValue(points:Point3d[], normals:number[][], colors:object[], values:number[]): void;
 		/**
 		 * @description Inserts a new point into the point list.
 		 * @param {number} index Insertion index.
@@ -5120,15 +5327,15 @@ declare module 'rhino3dm' {
 		 */
 		insert(index:number,point:number[]): void;
 		/** ... */
-		insertPointNormal(): void;
+		insertPointNormal(index:number, point:number[], normal:number[]): void;
 		/** ... */
-		insertPointColor(): void;
+		insertPointColor(index:number, point:number[], color:object): void;
 		/** ... */
-		insertPointNormalColor(): void;
+		insertPointNormalColor(index:number, point:number[], normal:number[]): void;
 		/** ... */
-		insertPointValue(): void;
+		insertPointValue(index:number, point:number[], value:number): void;
 		/** ... */
-		insertPointNormalColorValue(): void;
+		insertPointNormalColorValue(index:number, point:number[], color:object, value:number): void;
 		/**
 		 * @description Append a collection of points to this point cloud.
 		 * @param {number} index Index at which to insert the new collection.
@@ -5144,9 +5351,9 @@ declare module 'rhino3dm' {
 		removeAt(index:number): void;
 		/**
 		 * @description Copy all the point coordinates in this point cloud to an array.
-		 * @returns {Point3d[]} An array containing all the points in this point cloud.
+		 * @returns {number[][]} An array containing all the points in this point cloud.
 		 */
-		getPoints(): Point3d[];
+		getPoints(): number[][];
 		/**
 		 * @description Returns the location of the point at a specific index.
 		 * @param {number} index The index.
@@ -5155,24 +5362,27 @@ declare module 'rhino3dm' {
 		pointAt(index:number): number[];
 		/**
 		 * @description Copy all the normal vectors in this point cloud to an array.
-		 * @returns {any[]} An array containing all the normals in this point cloud.
+		 * @returns {number[][]} An array containing all the normals in this point cloud.
 		 */
-		getNormals(): any[];
+		getNormals(): number[][];
 		/**
 		 * @description Copy all the point colors in this point cloud to an array.
-		 * @returns {number[][]} An array containing all the colors in this point cloud.
+		 * @returns {object[]} An array containing all the colors in this point cloud.
 		 */
-		getColors(): number[][];
+		getColors(): object[];
 		/** ... */
-		getValues(): void;
+		getValues(): number[];
 		/**
 		 * @description Returns index of the closest point in the point cloud to a given test point.
 		 * @param {number[]} testPoint .
 		 * @returns {number} Index of point in the point cloud on success. -1 on failure.
 		 */
 		closestPoint(testPoint:number[]): number;
-		/** ... */
-		toThreejsJSON(): void;
+		/**
++		 * @description Converts a Rhino point cloud to a Three.js bufferGeometry
++		 * @returns {object} A Three.js bufferGeometry.
++		 */
+		toThreejsJSON(): object;
 	}
 
 	class PointCloudItem {
@@ -5199,10 +5409,10 @@ declare module 'rhino3dm' {
 		 */
 		normal: number[];
 		/**
-		 * Gets or sets the color of this point cloud item.
+		 * Gets or sets the color of this point cloud item in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 * If this point cloud item does not have a color, System.Drawing.Color.Black is returned.
 		 */
-		color: number[];
+		color: object;
 		/**
 		 * Gets or sets the hidden flag of this point cloud item.
 		 * If this point cloud item does not have a hidden flag, false is returned.
@@ -5210,7 +5420,7 @@ declare module 'rhino3dm' {
 		hidden: boolean;
 		/**
 		 */
-		value: any;
+		value: number;
 		/**
 		 * Gets the index of this point cloud item.
 		 */
@@ -5253,11 +5463,11 @@ declare module 'rhino3dm' {
 		 */
 		explode(): Curve[];
 		/** ... */
-		appendLine(): void;
+		appendLine(line:Line): boolean;
 		/** ... */
-		appendArc(): void;
+		appendArc(arc:Arc): boolean;
 		/** ... */
-		appendCurve(): void;
+		appendCurve(curve:Curve): boolean;
 		/**
 		 * @description Appends the curve to the polycurve without changing the new segment's geometry.
 		This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
@@ -5340,7 +5550,7 @@ declare module 'rhino3dm' {
 		 */
 		tangentAt(t:number): number[];
 		/** ... */
-		closesPoint(): void;
+		closesPoint(testPoint:number[]): number[];
 		/**
 		 * @description Gets the parameter along the polyline which is closest to a test-point.
 		 * @param {number[]} testPoint Point to approximate.
@@ -5421,177 +5631,162 @@ declare module 'rhino3dm' {
 	class PostEffect {
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 */
-		type: any;
+		type: PostEffectTypes;
 		/**
 		 */
-		localName: any;
+		localName: string;
 		/**
 		 */
-		listable: any;
+		listable: boolean;
 		/**
 		 */
-		on: any;
+		on: boolean;
 		/**
 		 */
-		shown: any;
+		shown: boolean;
 		/** ... */
-		getParameter(): void;
+		getParameter(key:string): string;
 		/** ... */
-		setParameter(): void;
+		setParameter(key:string, value:string): boolean;
 	}
 
 	class RenderChannels {
 		/**
 		 */
-		mode: Modes;
+		mode: RenderChannelsModes;
 		/**
 		 */
-		customIds: any;
+		customIds: string[];
 	}
 
 	class RenderContent extends ModelComponent {
 		/**
 		 */
-		kind: any;
+		kind: string;
 		/**
 		 */
-		isChild: any;
+		isChild: boolean;
 		/**
 		 */
-		isTopLevel: any;
+		isTopLevel: boolean;
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 */
-		typeName: any;
+		typeName: string;
 		/**
 		 */
-		name: any;
+		name: string;
 		/**
 		 */
-		typeId: any;
+		typeId: string;
 		/**
 		 */
-		renderEngineId: any;
+		renderEngineId: string;
 		/**
 		 */
-		plugInId: any;
+		plugInId: string;
 		/**
 		 */
-		notes: any;
+		notes: string;
 		/**
 		 */
-		tags: any;
+		tags: string;
 		/**
 		 */
-		groupId: any;
+		groupId: string;
 		/**
 		 */
-		hidden: any;
+		hidden: boolean;
 		/**
 		 */
-		reference: any;
+		reference: boolean;
 		/**
 		 */
-		autoDelete: any;
+		autoDelete: boolean;
 		/**
 		 */
-		childSlotName: any;
+		childSlotName: string;
 		/** ... */
-		getParent(): void;
+		getParent(): RenderContent;
 		/** ... */
-		getFirstChild(): void;
+		getFirstChild(): RenderContent;
 		/** ... */
-		getNextSibling(): void;
+		getNextSibling(): RenderContent;
 		/** ... */
-		getTopLevel(): void;
+		getTopLevel(): RenderContent;
 		/** ... */
-		setTypeName(): void;
+		setTypeName(name:string): void;
 		/** ... */
-		childSlotOn(): void;
+		childSlotOn(child_slot_name:string): boolean;
 		/** ... */
-		setChildSlotOn(): void;
+		setChildSlotOn(on:boolean, child_slot_name:string): boolean;
 		/** ... */
-		childSlotAmount(): void;
+		childSlotAmount(child_slot_name:string): number;
 		/** ... */
-		setChildSlotAmount(): void;
+		setChildSlotAmount(amount:number, child_slot_name:string): boolean;
 		/** ... */
-		getXML(): void;
+		getXML(recursive:boolean): string;
 		/** ... */
-		setXML(): void;
+		setXML(xml:string): boolean;
 		/** ... */
-		setChild(): void;
+		setChild(child:RenderContent, child_slot_name:string): boolean;
 		/** ... */
-		findChild(): void;
+		findChild(child_slot_name:string): RenderContent;
 		/** ... */
-		deleteChild(): void;
+		deleteChild(child_slot_name:string): boolean;
 		/** ... */
-		getParameter(): void;
+		getParameter(parameter:string): string;
 		/** ... */
-		setParameter(): void;
+		setParameter(key:string, value:string): boolean;
 	}
 
-	class RenderEnvironment extends File3dmRenderContent {
+	class RenderEnvironment extends RenderContent {
 		/** ... */
-		toEnvironment(): void;
+		toEnvironment(): Environment;
 	}
 
 	class RenderEnvironments {
 		/**
 		 */
-		backgroundId: any;
-		/**
-		 */
-		skylightingId: any;
-		/**
-		 */
-		skylightingOverride: any;
-		/**
-		 */
-		reflectionId: any;
-		/**
-		 */
-		reflectionOverride: any;
-		/**
-		 */
-		backgroundId: any;
+		backgroundId: string;
 		/**
 		 */
-		skylightingId: any;
+		skylightingId: string;
 		/**
 		 */
-		skylightingOverride: any;
+		skylightingOverride: boolean;
 		/**
 		 */
-		reflectionId: any;
+		reflectionId: string;
 		/**
 		 */
-		reflectionOverride: any;
+		reflectionOverride: boolean;
 	}
 
-	class RenderMaterial extends File3dmRenderContent {
+	class RenderMaterial extends RenderContent {
 		/** ... */
-		toMaterial(): void;
+		toMaterial(): Material;
 	}
 
 	class RenderSettings extends CommonObject {
 		/**
-		 * Gets or sets the ambient light color used in rendering.
+		 * Gets or sets the ambient light color used in rendering in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		ambientLight: number[];
+		ambientLight: object;
 		/**
-		 * Gets or sets the background top color used in rendering.
+		 * Gets or sets the background top color used in rendering in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 * Sets also the background color if a solid background color is set.
 		 */
-		backgroundColorTop: number[];
+		backgroundColorTop: object;
 		/**
-		 * Gets or sets the background bottom color used in rendering.
+		 * Gets or sets the background bottom color used in rendering in js object format: {r:number, g:number, b:number)} where number is from 0 - 255
 		 */
-		backgroundColorBottom: number[];
+		backgroundColorBottom: object;
 		/**
 		 * Gets or sets a value indicating whether to render using lights that are on layers that are off.
 		 */
@@ -5709,23 +5904,23 @@ declare module 'rhino3dm' {
 		sun: Sun;
 		/**
 		 */
-		renderEnvironments: any;
+		renderEnvironments: RenderEnvironments;
 		/**
 		 * If this object is associated with a document, this gets the document post effect data collection.
 		 * If this object is associated with a File3dm, this gets the File3dm's post effect data collection.
 		 * Otherwise it gets a 'free-floating' post effect data collection object.
 		 */
-		postEffects: PostEffectCollection;
+		postEffects: PostEffect[];
 	}
 
-	class RenderTexture extends File3dmRenderContent {
+	class RenderTexture extends RenderContent {
 		/**
 		 */
-		fileName: any;
+		fileName: string;
 		/** ... */
-		toTexture(): void;
+		toTexture(): Texture;
 		/** ... */
-		setFilename(): void;
+		setFilename(fileName: string): void;
 	}
 
 	class RevSurface extends Surface {
@@ -5752,7 +5947,7 @@ declare module 'rhino3dm' {
 		perspectiveOnly: boolean;
 		/**
 		 */
-		fieldGridOn: any;
+		fieldGridOn: boolean;
 		/**
 		 * Turn on the live area, which shows the size of the rendered view as a yellow frame
 		 * in the viewport.
@@ -5805,19 +6000,19 @@ declare module 'rhino3dm' {
 	class ShutLining {
 		/**
 		 */
-		on: any;
+		on: boolean;
 		/**
 		 */
-		faceted: any;
+		faceted: boolean;
 		/**
 		 */
-		autoUpdate: any;
+		autoUpdate: boolean;
 		/**
 		 */
-		forceUpdate: any;
+		forceUpdate: boolean;
 		/**
 		 */
-		curves: any;
+		curves: File3dmShutLiningCurveTable;
 		/** ... */
 		deleteAllCurves(): void;
 	}
@@ -5825,22 +6020,22 @@ declare module 'rhino3dm' {
 	class ShutLiningCurve {
 		/**
 		 */
-		id: any;
+		id: string;
 		/**
 		 */
-		radius: any;
+		radius: number;
 		/**
 		 */
-		profile: any;
+		profile: number;
 		/**
 		 */
-		enabled: any;
+		enabled: boolean;
 		/**
 		 */
-		pull: any;
+		pull: boolean;
 		/**
 		 */
-		isBump: any;
+		isBump: boolean;
 	}
 
 	class Skylight {
@@ -5952,11 +6147,11 @@ declare module 'rhino3dm' {
 		 */
 		toNurbsSurface(): NurbsSurface;
 		/** ... */
-		encode(): void;
+		encode(): object;
 		/** ... */
-		toJSON(): void;
+		toJSON(): object;
 		/** ... */
-		static decode(): void;
+		static decode(json:object): Sphere;
 	}
 
 	class SubD extends GeometryBase {
@@ -5989,22 +6184,22 @@ declare module 'rhino3dm' {
 	class Sun {
 		/**
 		 */
-		minYear: any;
+		minYear: number;
 		/**
 		 */
-		maxYear: any;
+		maxYear: number;
 		/**
 		 */
-		vector: Vector3d;
+		vector: number[];
 		/**
 		 */
-		enableAllowed: any;
+		enableAllowed: boolean;
 		/**
 		 */
-		enableOn: any;
+		enableOn: boolean;
 		/**
 		 */
-		manualControlAllowed: any;
+		manualControlAllowed: boolean;
 		/**
 		 * Manual control 'on' state. When true, allows the user to set the sun
 		 * azimuth and altitude directly. When false, the values are computed.
@@ -6049,23 +6244,23 @@ declare module 'rhino3dm' {
 		daylightSavingMinutes: number;
 		/**
 		 */
-		year: any;
+		year: number;
 		/**
 		 */
-		month: any;
+		month: number;
 		/**
 		 */
-		day: any;
+		day: number;
 		/**
 		 */
-		hours: any;
+		hours: number;
 		/**
 		 * Sun intensity.
 		 */
 		intensity: number;
 		/**
 		 */
-		isValid: any;
+		isValid: boolean;
 		/**
 		 * Get a Light which represents the sun. If manual control is in effect, no sun calculation
 		 * is performed; the function uses the last known values of azimuth and altitude.
@@ -6074,7 +6269,7 @@ declare module 'rhino3dm' {
 		 */
 		light: Light;
 		/** ... */
-		static sunColorFromAltitude(): void;
+		static sunColorFromAltitude(altitude:number): object;
 	}
 
 	class Surface extends GeometryBase {
@@ -6196,7 +6391,7 @@ declare module 'rhino3dm' {
 		 */
 		toNurbsSurface(): NurbsSurface;
 		/** ... */
-		toNurbsSurfaceTolerance(): void;
+		toNurbsSurfaceTolerance(tolareance:number): object;
 		/**
 		 * @description Tests a surface to see if it is planar to zero tolerance.
 		 * @returns {boolean} true if the surface is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
@@ -6314,26 +6509,26 @@ declare module 'rhino3dm' {
 		/**
 		 * Helper for access to the repeat value encoded in UvwTransform
 		 */
-		repeat: Vector2d;
+		repeat: number[];
 		/**
 		 * Helper for access to the offset value encoded in UvwTransform
 		 */
-		offset: Vector2d;
+		offset: number[];
 		/**
 		 * Helper for access to the rotation value encoded in UvwTransform
 		 */
 		rotation: number;
 		/** ... */
-		fileReference(): void;
+		fileReference(): FileReference;
 	}
 
 	class TextureMapping extends CommonObject {
 		/**
 		 */
-		requiresVertexNormals: any;
+		requiresVertexNormals: boolean;
 		/**
 		 */
-		isPeriodic: any;
+		isPeriodic: boolean;
 		/**
 		 * @description Create a mapping that will convert surface parameters into normalized(0,1)x(0,1) texture coordinates.
 		 * @returns {TextureMapping} TextureMapping instance or null if failed.
@@ -6388,18 +6583,18 @@ declare module 'rhino3dm' {
 		 * @description Get a cylindrical projection parameters from this texture mapping.
 		 * @returns {boolean} Returns true if a valid cylinder is returned.
 		 */
-		tryGetMappingCylinder(): object;
+		tryGetMappingCylinder(): Cylinder;
 		/**
 		 * @description Get a spherical projection parameters from this texture mapping.
 		 * @returns {boolean} Returns true if a valid sphere is returned.
 		 */
-		tryGetMappingSphere(): object;
+		tryGetMappingSphere(): Sphere;
 		/** ... */
-		reverseTextureCoordinate(): void;
+		reverseTextureCoordinate(direction:number): boolean;
 		/** ... */
-		swapTextureCoordinate(): void;
+		swapTextureCoordinate(i:number, j:number): boolean;
 		/** ... */
-		tileTextureCoordinate(): void;
+		tileTextureCoordinate(direction:number, count: number, offset:number): boolean;
 		/**
 		 * @description Evaluate the mapping to get a texture coordinate
 		 * @param {number[]} p Vertex location
@@ -6418,19 +6613,19 @@ declare module 'rhino3dm' {
 	class Thickening {
 		/**
 		 */
-		on: any;
+		on: boolean;
 		/**
 		 */
-		distance: any;
+		distance: number;
 		/**
 		 */
-		solid: any;
+		solid: boolean;
 		/**
 		 */
-		offsetOnly: any;
+		offsetOnly: boolean;
 		/**
 		 */
-		bothSides: any;
+		bothSides: boolean;
 	}
 
 	class Transform {
@@ -6552,15 +6747,15 @@ declare module 'rhino3dm' {
 
 		constructor(diagonalValue: number);
 		/** ... */
-		static identity(): void;
+		static identity(): Transform;
 		/** ... */
-		static zeroTransformation(): void;
+		static zeroTransformation(): Transform;
 		/** ... */
-		static unset(): void;
+		static unset(): Transform;
 		/** ... */
-		static translationXYZ(): void;
+		static translationXYZ(x:number, y:number, z:number): Transform;
 		/** ... */
-		static translationVector(): void;
+		static translationVector(vector:number[]): Transform;
 		/**
 		 * @description Constructs a new uniform scaling transformation with a specified scaling anchor point.
 		 * @param {number[]} anchor Defines the anchor point of the scaling operation.
@@ -6578,7 +6773,7 @@ declare module 'rhino3dm' {
 		 */
 		static rotation(sinAngle:number,cosAngle:number,rotationAxis:number[],rotationCenter:number[]): Transform;
 		/** ... */
-		static rotationVectors(): void;
+		static rotationVectors(startDirection:number[], endDirection:number[], rotationCenter:number[]): Transform;
 		/**
 		 * @description Create mirror transformation matrix
 		The mirror transform maps a point Q to
@@ -6590,7 +6785,7 @@ declare module 'rhino3dm' {
 		 */
 		static mirror(pointOnMirrorPlane:number[],normalToMirrorPlane:number[]): Transform;
 		/** ... */
-		static mirrorPlane(): void;
+		static mirrorPlane(mirrorPlane:Plane): Transform;
 		/**
 		 * @description Create a rotation transformation that orients plane0 to plane1. If you want to orient objects from
 		one plane to another, use this form of transformation.
@@ -6618,7 +6813,7 @@ declare module 'rhino3dm' {
 		 */
 		static multiply(a:Transform,b:Transform): Transform;
 		/** ... */
-		determinant(): void;
+		determinant(): number;
 		/**
 		 * @description Attempts to get the inverse transform of this transform.
 		 * @returns {Array} [boolean, Transform]
@@ -6627,7 +6822,7 @@ declare module 'rhino3dm' {
 		If false is returned and this Transform is Valid, inverseTransform will be set to a pseudo inverse.
 		 * (Transform) The inverse transform. This out reference will be assigned during this call.
 		 */
-		tryGetInverse(): object;
+		tryGetInverse(): Transform;
 		/**
 		 * @description Computes a new bounding box that is the smallest axis aligned
 		bounding box that contains the transformed result of its 8 original corner
@@ -6656,7 +6851,7 @@ declare module 'rhino3dm' {
 		name: string;
 		/**
 		 */
-		wallpaperName: any;
+		wallpaperName: string;
 		/**
 		 * True if wallpaper (if any) is to be shown in gray scale in this view.
 		 */
@@ -6686,9 +6881,8 @@ declare module 'rhino3dm' {
 	class ViewportInfo extends CommonObject {
 		/**
 		 */
-		isValidCameraFrame: any;
+		isValidCameraFrame: boolean;
 		/**
-		 * Gets a value that indicates whether the camera is valid.
 		 */
 		isValidCamera: boolean;
 		/**
@@ -6772,9 +6966,9 @@ declare module 'rhino3dm' {
 		 */
 		id: string;
 		/** ... */
-		static defaultTop(): void;
+		static defaultTop(): ViewportInfo;
 		/** ... */
-		static defaultPerspective(): void;
+		static defaultPerspective(): ViewportInfo;
 		/**
 		 * @description Use this function to change projections of valid viewports
 		from parallel to perspective.  It will make common additional
@@ -6835,7 +7029,7 @@ declare module 'rhino3dm' {
 		 * @description Sets the camera location (position) point.
 		 * @returns {boolean} true if the operation succeeded; otherwise, false.
 		 */
-		setCameraLocation(): boolean;
+		setCameraLocation(point:number[]): boolean;
 		/**
 		 * @description Sets the direction that the camera faces.
 		 * @param {number[]} direction A new direction.
